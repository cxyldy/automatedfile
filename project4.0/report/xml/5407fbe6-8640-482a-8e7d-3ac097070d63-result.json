{"name": "发起分账交易", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)", "trace": "self = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\nD:\\python37\\lib\\site-packages\\requests\\models.py:972: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>stgw</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nencoding = None, cls = None, object_hook = None, parse_float = None\nparse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, encoding=None, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n                raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\n            s = s.decode(detect_encoding(s), 'surrogatepass')\n    \n        if (cls is None and object_hook is None and\n                parse_int is None and parse_float is None and\n                parse_constant is None and object_pairs_hook is None and not kw):\n>           return _default_decoder.decode(s)\n\nD:\\python37\\lib\\json\\__init__.py:348: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000016D3C542D08>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>stgw</center>\\r\\n</body>\\r\\n</html>\\r\\n'\n_w = <built-in method match of re.Pattern object at 0x0000016D3C59C9F0>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n>       obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n\nD:\\python37\\lib\\json\\decoder.py:337: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x0000016D3C542D08>\ns = '<html>\\r\\n<head><title>502 Bad Gateway</title></head>\\r\\n<body>\\r\\n<center><h1>502 Bad Gateway</h1></center>\\r\\n<hr><center>stgw</center>\\r\\n</body>\\r\\n</html>\\r\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\python37\\lib\\json\\decoder.py:355: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcase.test_api.TestCase object at 0x0000016D3F6B11C8>\ncase = ['发起分账交易', '/split/paySplitOnceOrder', '{\\n    \"randomData\": \"1234567890asd\",\\n    \"timestamp\": \"20211223201746\",\\n   ...            \"description\": \"测试分账\"\\n        }\\n    }\\n}', \"{'Content-Type': 'application/json'}\\n\", 'post', 'json', ...]\n\n    def test_common(self, case):\n        # 判断excel文件中use_flag为N则跳过用例执行\n        self.skip_case(case)\n        allure.dynamic.title(case[0])\n        title = case[0]\n        url = case[1]\n        body = eval(case[2])\n        headers = eval(case[3])\n        method=case[4]\n        method_type=case[5]\n        jsonpaths=case[6]\n        dependency=case[7]\n        key = case[10]\n        # 调用加密方法获取加密密钥\n        get_hmac = get_rsa_sign(body, key)\n        # 将获取的加密密钥更新至body中的hmac中\n        body[\"hmac\"] = get_hmac\n        # print(key)\n        # 把返回的数据先保存进fanhui_parm_type列表\n        logger.info(\"用例数据拆包开始。。。。\")\n        # 调用中间request方法发起请求\n        res = medium_api.MediumQueryMethod().request(url, method,method_type, body,headers)\n        # 响应结果\n>       result = res.json()\n\ntestcase\\test_api.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Response [502]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\python37\\lib\\site-packages\\requests\\models.py:976: JSONDecodeError"}, "attachments": [{"name": "log", "source": "78cad828-2caa-4411-8ded-5ae1eb8e5d58-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "case", "value": "['发起分账交易', '/split/paySplitOnceOrder', '{\\n    \"randomData\": \"1234567890asd\",\\n    \"timestamp\": \"20211223201746\",\\n    \"characterSet\": \"UTF-8\",\\n    \"signType\": \"PUB_SIGN\",\\n    \"appId\": \"A00003019\",\\n    \"version\": \"1.0.0\",\\n    \"hmac\": \"DKx8hQchXGGwSW\",\\n    \"reqData\": {\\n        \"platformCode\": \"A00000901\",\\n        \"platformType\": \"0\",\\n        \"bizAreaId\": \"20220002\",\\n        \"paymentMerchantCode\": \"909000010745200\",\\n        \"oriPayNo\": \"20220826909000010745200000300938\",\\n        \"outOrderNo\": \"222222\",\\n        \"rcvMercInfos\": {\\n            \"payeeMerchantCode\": \"909161010743319\",\\n            \"rcvAmount\": 93,\\n            \"description\": \"测试分账\"\\n        }\\n    }\\n}', \"{'Content-Type': 'application/json'}\\n\", 'post', 'json', '', '', '', '', 'MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAIt1Ta/sDj7uo+QEoA8Ovj7bm4Drydy9GgPhjFz0N2eSTX4GanHUYz5kguCsVRc2yq5nESPpNPeIAbByNEK+u1MN4CJCJ8AHsFD8aax3rhZS0smWsxWhkxSMm6+9sxmnTMFwneFxlmaXyUzhK6DHyk5o4z62yu1B8ExAJjpR36fJAgMBAAECgYB50mmfsKQtI0e1arjrDmTwAeSQNOjsU6BDHacAmDFB31KkMTSQ5Qggu6p8Wu4lzi41NUGKzi//vyZCnTC70WNOdAemeeHSMSGwuRPWac9iHPqYNq/63Zr3VDzKcAqU9Bqfk2Bb9sJ4b6C7YsJhL3OovC0gKlKDpr699g/dAHEzEQJBAOejX54Zpi/uHGe+zPuK7uH/P8lZcgLeT35xQt2e7cMZIezMocMQH6fzC71ZDnc3hOsoVcOg501OS0hJa0gSCB0CQQCaIBOcpOdt3EjzSTfLIpq5TgobcWUQE+aedA2dlamsMOxzTb+Fv+qWRcq2wAKBfWzKCAAceZ++s9Mly+s7IAadAkEArvEcTfNhJ+HVYiUf+vo64EQ+kHsVOEVeFEjGD0rwluBsVsNViFStE9LjkuWnnzI3GMMlwtHK3v+6q6WHeK7loQJAMaxY5cl4FT5D/LUCWGPkvgha1ZFsYwwm7ba1lK5hqu9xpY/PREogTyJbPR8RL66+2zZM4uCIDaxjRvE79ShTOQJBAMo5CFw25ztjm0PtjaGlyhbA1JyPIM6TZgXRSGO8VPxVQQ641t8IDTC33Ev+UUSsW5OevVG20PZx2J3FNgtXlXk=', '', 'Y']"}], "start": 1666873231741, "stop": 1666873231809, "uuid": "2b158804-e460-4195-8fe2-1748f6783dd3", "historyId": "34d9be5be45fe7a20549c6ca1b434864", "testCaseId": "cddeae64fb6160dc0d2158a40589af71", "fullName": "testcase.test_api.TestCase#test_common", "labels": [{"name": "feature", "value": "{b}"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_api"}, {"name": "subSuite", "value": "TestCase"}, {"name": "host", "value": "DESKTOP-JVUQA5N"}, {"name": "thread", "value": "15692-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_api"}]}